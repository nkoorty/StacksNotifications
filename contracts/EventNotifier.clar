(define-data-var event-counter int 0)
(define-data-var event-log (list 100 {id: int, event: (string-ascii 50), timestamp: uint}) [])

(define-public (trigger-event (event-type (string-ascii 50)))
  (begin
    (var-set event-counter (+ (var-get event-counter) 1))
    (log-event (var-get event-counter) event-type)
    (print { "event": event-type, "counter": (var-get event-counter) })
    (ok (var-get event-counter))
  )
)

(define-read-only (get-event-counter)
  (ok (var-get event-counter))
)

(define-read-only (get-event-log)
  (ok (var-get event-log))
)

(define-read-only (get-event-by-id (id int))
  (let ((event (find-event id)))
    (if (is-some event)
      (ok (unwrap! event (err "Event not found")))
      (err "Event not found")
    )
  )
)

(define-private (log-event (id int) (event-type (string-ascii 50)))
  (let ((timestamp (block-height)))
    (let ((new-event {id: id, event: event-type, timestamp: timestamp}))
      (let ((new-log (cons new-event (var-get event-log))))
        (var-set event-log (take 100 new-log))
      )
    )
  )
)

(define-private (find-event (id int))
  (let ((events (var-get event-log)))
    (let ((filtered-events (filter (lambda (event)
                                     (is-eq (get id event) id))
                                   events)))
      (if (is-eq (len filtered-events) 0)
        (none)
        (some (nth 0 filtered-events))
      )
    )
  )
)
